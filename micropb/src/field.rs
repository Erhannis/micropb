//! Traits for decoding and encoding Protobuf fields.
//!
//! Users can substitute their own field types into message structs generated by `micropb`. These
//! custom fields must implement the traits in this module, so the code generator knows how to
//! encode and decode them. As such, these traits are implemented by users.

#[cfg(feature = "decode")]
use crate::decode::{DecodeError, PbDecoder, PbRead};
#[cfg(feature = "encode")]
use crate::encode::{PbEncoder, PbWrite};
use crate::Tag;

#[cfg(feature = "decode")]
/// One or more Protobuf fields that can be decoded from the wire.
///
/// If multiple fields are included, then the fields will be decoded one at a time.
pub trait FieldDecode {
    /// Decode one single field.
    ///
    /// The field being decoded is denoted by `tag`. If the field number of `tag` is unrecognized,
    /// return `false`. Otherwise, decode the field from the decoder and return `true`.
    fn decode_field<R: PbRead>(
        &mut self,
        tag: Tag,
        decoder: &mut PbDecoder<R>,
    ) -> Result<bool, DecodeError<R::Error>>;
}

#[cfg(feature = "decode")]
impl<T: FieldDecode> FieldDecode for &mut T {
    fn decode_field<R: PbRead>(
        &mut self,
        tag: Tag,
        decoder: &mut PbDecoder<R>,
    ) -> Result<bool, DecodeError<R::Error>> {
        (*self).decode_field(tag, decoder)
    }
}

#[cfg(feature = "encode")]
/// One or more Protobuf fields that can be encoded onto the wire.
///
/// If multiple fields are included, then all fields will be encoded at once.
pub trait FieldEncode {
    /// Encode all fields, including the tags.
    ///
    /// Unlike [`FieldDecode::decode_field`], this call is expected to write out complete fields,
    /// including the tags. It should also write out all fields as once, since it will only be
    /// called once. For non-packed repeated fields, each element is written out as its own field.
    fn encode_fields<W: PbWrite>(&self, encoder: &mut PbEncoder<W>) -> Result<(), W::Error>;

    /// Compute size of all fields, including the tags.
    fn compute_fields_size(&self) -> usize;
}

#[cfg(feature = "encode")]
impl<T: FieldEncode> FieldEncode for &T {
    fn encode_fields<W: PbWrite>(&self, encoder: &mut PbEncoder<W>) -> Result<(), W::Error> {
        (*self).encode_fields(encoder)
    }

    fn compute_fields_size(&self) -> usize {
        (*self).compute_fields_size()
    }
}
